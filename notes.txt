Node Authentication with JWT
Add authenticification
Log in with token and save it.  Then use it to create a log in

Postman to make requests
Npm init
Install dependencies
Express jsonwebtoken
npm install express jsonwebtoken
Npm install -g nodemon

Call express and jsonwebtoken
Initialize our app variable with express

Create a api route for index
Need req and res 
Send a long a message 
Then add res.json({
});

Add listen
app.listen(8080, () => console.log('Server started on port 8080'));

Version2.0
Create a route that you want to protect
Created post request

Creating a route to get a token
Create a mock user
jwt.sign();

app.post('/api/login', (req, res) => {
	// Mock User
	const user = {
		id: 1,
		username: 'brad',
		email: 'brad@gmail.com'
	};
	
	jwt.sign({user}, 'secretkey', (err, token) => {
		res.json({
			token
		});
	});
});


Get auth header value
Send token, send token in header, and send it as authorization value
// FORMAT of Token
// Authorization: Bearer<access_token>

Check if bearer is undefined

if(typeof bearerHeader !== 'undefined') else 
res.sendStatus(403);
403-Forbidden
Take token out of Bearer <access_token>
Split at the space
const bearer = bearerHeader.split(' ');
Get token from array
const bearerToken = bearer[1];
//Set the token
req.token = bearerToken;
// Next Middleware

Verify the token

Iat iat is issued at, which is 
Can make request whne you have the header and have bearer token

Send an expiration if you dont want the token to last forever
Add . . . in app.post in jwt.sign
{ expiresIn: '30s' }
